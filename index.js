// Generated by CoffeeScript 1.6.3
(function() {
  var AmorphousRecipe, Chest, ChestDialog, CraftingThesaurus, Inventory, InventoryWindow, ItemPile, Modal, PositionalRecipe, Recipe, RecipeList, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Modal = require('voxel-modal');

  Inventory = require('inventory');

  InventoryWindow = require('inventory-window');

  ItemPile = require('itempile');

  _ref = require('craftingrecipes'), Recipe = _ref.Recipe, AmorphousRecipe = _ref.AmorphousRecipe, PositionalRecipe = _ref.PositionalRecipe, CraftingThesaurus = _ref.CraftingThesaurus, RecipeList = _ref.RecipeList;

  module.exports = function(game, opts) {
    return new Chest(game, opts);
  };

  module.exports.pluginInfo = {
    loadAfter: ['voxel-blockdata', 'voxel-registry', 'craftingrecipes']
  };

  Chest = (function() {
    function Chest(game, opts) {
      var _ref1, _ref2, _ref3, _ref4;
      this.game = game;
      this.playerInventory = (function() {
        if ((_ref1 = opts.playerInventory) != null) {
          return _ref1;
        } else {
          throw 'voxel-chest requires "playerInventory" set to inventory instance';
        }
      })();
      this.registry = (_ref2 = game.plugins) != null ? _ref2.get('voxel-registry') : void 0;
      this.recipes = (_ref3 = game.plugins) != null ? _ref3.get('craftingrecipes') : void 0;
      this.blockdata = (_ref4 = game.plugins) != null ? _ref4.get('voxel-blockdata') : void 0;
      if (opts.registerBlock == null) {
        opts.registerBlock = this.registry != null;
      }
      if (opts.registerRecipe == null) {
        opts.registerRecipe = this.recipes != null;
      }
      this.chestDialog = new ChestDialog(game, this.playerInventory, this.registry, this.blockdata);
      this.opts = opts;
      this.enable();
    }

    Chest.prototype.enable = function() {
      var _this = this;
      if (this.opts.registerBlock) {
        this.registry.registerBlock('chest', {
          texture: ['door_wood_lower', 'piston_top_normal', 'bookshelf'],
          onInteract: function(target) {
            _this.chestDialog.open(target);
            return true;
          }
        });
      }
      if (this.opts.registerRecipe) {
        return this.recipes.register(new PositionalRecipe([['wood.plank', 'wood.plank', 'wood.plank'], ['wood.plank', void 0, 'wood.plank'], ['wood.plank', 'wood.plank', 'wood.plank']], new ItemPile('chest', 1)));
      }
    };

    Chest.prototype.disable = function() {};

    return Chest;

  })();

  ChestDialog = (function(_super) {
    __extends(ChestDialog, _super);

    function ChestDialog(game, playerInventory, registry, blockdata) {
      var chestCont,
        _this = this;
      this.game = game;
      this.playerInventory = playerInventory;
      this.registry = registry;
      this.blockdata = blockdata;
      this.playerIW = new InventoryWindow({
        width: 10,
        inventory: this.playerInventory
      });
      this.chestInventory = new Inventory(10, 3);
      this.chestInventory.on('changed', function() {
        return _this.updateBlockdata();
      });
      this.chestIW = new InventoryWindow({
        inventory: this.chestInventory
      });
      this.dialog = document.createElement('div');
      this.dialog.style.border = '6px outset gray';
      this.dialog.style.visibility = 'hidden';
      this.dialog.style.position = 'absolute';
      this.dialog.style.top = '20%';
      this.dialog.style.left = '30%';
      this.dialog.style.zIndex = 1;
      this.dialog.style.backgroundImage = 'linear-gradient(rgba(255,255,255,0.5) 0%, rgba(255,255,255,0.5) 100%)';
      document.body.appendChild(this.dialog);
      chestCont = this.chestIW.createContainer();
      this.dialog.appendChild(chestCont);
      this.dialog.appendChild(document.createElement('br'));
      this.dialog.appendChild(this.playerIW.createContainer());
      ChestDialog.__super__.constructor.call(this, game, {
        element: this.dialog
      });
    }

    ChestDialog.prototype.loadBlockdata = function(x, y, z) {
      var bd, i, itemPile, newInventory, _i, _len, _ref1;
      if (this.blockdata == null) {
        console.log('voxel-blockdata not loaded, voxel-chest persistence disabled');
        return;
      }
      bd = this.blockdata.get(x, y, z);
      console.log('activeBlockdata=', JSON.stringify(bd));
      if (bd != null) {
        console.log('load existing at ', x, y, z);
        newInventory = Inventory.fromString(bd.inventory);
        console.log('newInventory=' + JSON.stringify(newInventory));
        _ref1 = newInventory.array;
        for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
          itemPile = _ref1[i];
          console.log('load chest', i, itemPile);
          this.chestInventory.set(i, itemPile);
        }
      } else {
        console.log('new empty inventory at ', x, y, z);
        bd = {
          inventory: this.chestInventory.toString()
        };
        this.blockdata.set(x, y, z, bd);
      }
      this.activeBlockdata = bd;
      return console.log('activeBlockdata 2=', JSON.stringify(this.activeBlockdata));
    };

    ChestDialog.prototype.open = function(target) {
      var x, y, z, _ref1;
      this.chestInventory.clear();
      _ref1 = target.voxel, x = _ref1[0], y = _ref1[1], z = _ref1[2];
      this.loadBlockdata(x, y, z);
      return ChestDialog.__super__.open.call(this);
    };

    ChestDialog.prototype.updateBlockdata = function() {
      console.log('update with activeBlockdata=', JSON.stringify(this.activeBlockdata));
      if (this.activeBlockdata == null) {
        return;
      }
      console.log('chestInventory=', this.chestInventory.toString());
      return this.activeBlockdata.inventory = this.chestInventory.toString();
    };

    ChestDialog.prototype.close = function() {
      delete this.activeBlockdata;
      return ChestDialog.__super__.close.call(this);
    };

    return ChestDialog;

  })(Modal);

}).call(this);
